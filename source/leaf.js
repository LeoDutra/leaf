/* LEAF JavaScript Library Version 0.10.3a  MIT License: Copyright (c) 2008-2010 Leonardo Dutra Constâncio  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  TODO: - Event handlers based on John Resig's code, the jQuery man (http://ejohn.org/blog/flexible-javascript-events/) - Future JSON.parse() and JSON.stringfy() from http://www.json.org/ - Animation + Tween based on Robert functions and MooFx - Implement [].reduce(), [].reduceRight and more ECMA 5 goodies - Build class for XHR, allowing intellisense and cross-browser fix - Deep test set/getBackground - Function.prototype.bind() - Date.now() && Date.prototype.toISOString() */leaf = this.leaf || {};if (!Date.prototype.toJSON) {	// base code by Crookford (http://json.org/json2.js)	Date.prototype.toJSON = function(key)	{		function f(n)		{			return n < 10 ? '0' + n : n;		}		return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' +		f(this.getUTCMonth() + 1) +		'-' +		f(this.getUTCDate()) +		'T' +		f(this.getUTCHours()) +		':' +		f(this.getUTCMinutes()) +		':' +		f(this.getUTCSeconds()) +		'Z' : null;	};	String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key)	{		return this.valueOf();	};}if (!String.prototype.trim) {	String.prototype.trim = function()	{		return this.replace(/^(\s|\u00A0)+|(\s|\u00A0)+$/g, '');	};	String.prototype.trimLeft = function()	{		return this.replace(/^(\s|\u00A0)+/, '');	};	String.prototype.trimRight = function()	{		return this.replace(/(\s|\u00A0)+$/, '');	};}//okArray.isArray = function(array){	//return Object.prototype.toString.call( array ) === "[object Array]"; (ejohn)	return array && array.constructor === Array;};if (!Array.prototype.some) {	Array.prototype.some = function(callback, thisObject)	{		if (typeof callback === 'function') 		{			var L = this.length;			for (var i = 0; i < L; ++i) 			{				if (i in this && callback.call(thisObject, this[i], i, this)) 				{					return true;				}			}		}		return false;	};		Array.prototype.forEach = function(callback, thisObject)	{		if (typeof callback === 'function') 		{			var L = this.length;			for (var i = 0; i < L; ++i) 			{				if (i in this) 				{					callback.call(thisObject, this[i], i, this);				}			}		}	};		Array.prototype.every = function(callback, thisObject)	{		if (typeof callback === 'function') 		{			var L = this.length;			for (var i = 0; i < L; ++i) 			{				if (i in this && !callback.call(thisObject, this[i], i, this)) 				{					return false;				}			}		}		return true;	};		Array.prototype.indexOf = function(searchElement, fromIndex)	{		var L = this.length;		var i = Number(fromIndex) || 0;		if (i < 0) // must test before shift, cause of "-0.0...1" to "-0.900..." possibility		{			if ((i >>= 0) < 0) // ceil for less than zero 			{				i += L;			}		}		else 		{			i >>= 0; // floor, since i >= 0		}		while (i < L) 		{			if (i in this && this[i] === searchElement) 			{				return i;			}			++i;		}		return -1;	};	Array.prototype.lastIndexOf = function(searchElement, fromIndex)	{		var L = this.length;		var i = Number(fromIndex);		if (i === i) // false if is NaN 		{			if (i < 0) 			{				if ((i >>= 0) < 0) // ceil for less than zero				{					i += L;				}			}			else 				if (L <= (i >>= 0)) // floor, since i >= 0				{					i = L - 1;				}		}		else 		{			i = L - 1;		}		while (~ i) // -1 < i, ~ = -(N+1) 		{			if (i in this && this[i] === searchElement) 			{				return i;			}			--i;		}		return -1;	};	Array.prototype.filter = function(callback, thisObject)	{		if (typeof callback === 'function') 		{			var L = this.length;			var R = [];			var n = 0;			var v; // does not mutate object			for (var i = 0; i < L; ++i) 			{				if (i in this && callback.call(thisObject, v = this[i], i, this)) 				{					R[n++] = v;				}			}			return R;		}		return null;	};	Array.prototype.map = function(callback, thisObject)	{		if (typeof callback === 'function') 		{			var L = this.length;			var R = [];			for (var i = 0; i < L; ++i) 			{				if (i in this) 				{					R[i] = callback.call(thisObject, this[i], i, this);				}			}			return R;		}		return null;	};}leaf.extend = function(superObject, extension){	if (superObject && extension) 	{		var n = function () {};		n.prototype = superObject;		superObject = new n();		for (n in extension) 		{			if (extension[n] !== undefined) 			{				superObject[n] = extension[n];			}		}		return superObject;	}	return null;};//okleaf.clone = function(object){	if (JSON.parse) 	{		return JSON.parse(JSON.stringify(obj));	}	var c = function(o)	{		var R = {};		var k;		for (k in o) 		{			R[k] = typeof o[k] === 'object' && o[k] ? c(o[k]) : o[k];		}		return R;	};	return c(object);};// TODO testif (window.XMLHttpRequest) {	leaf.createXHR = function()	{		return new XMLHttpRequest();	};}else 	if (window.ActiveXObject) 	{		leaf.createXHR = function()		{			if (!leaf.createXHR.activeXVersion) 			{				leaf.createXHR.activeXVersion = (function()				{					var A = ActiveXObject; // cache					var V = ['MSXML2.XMLHTTP', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP.4.0', 'MSXML2.XMLHTTP.5.0', 'MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.7.0'];					var i = 6; // 2 to 7					var o;					while (i--) 					{						try 						{							new A(V[i]);							return V[i];						} 						catch (o) 						{						}					}					return 'Microsoft.XMLHTTP';				})();			}			return new ActiveXObject(leaf.createXHR.activeXVersion);		};	}	else 	{		leaf.createXHR = function()		{			return null;		};	}leaf.getMouseXY = function(event){	if ((event = event || window.event)) 	{		if (typeof event.pageY === 'number') 		{			return {				x: event.pageX,				y: event.pageY			};		}		var H = document.documentElement;		var B = document.body;		if (B) 		{			return {				x: event.clientX + (H.scrollLeft || B.scrollLeft) - (H.clientLeft >> 0) - (B.clientLeft >> 0),				y: event.clientY + (H.scrollTop || B.scrollTop) - (H.clientTop >> 0) - (B.clientTop >> 0)			};		}		return {			x: event.clientX + H.scrollLeft - (H.clientLeft >> 0),			y: event.clientY + H.scrollTop - (H.clientTop >> 0)		};	}	return null;};leaf.purge = function(domObj) // basecode by Crookford (http://javascript.crockford.com/memory/leak.html){	if (domObj) 	{		var a = domObj.attributes;		if (a) 		{			var i = a.length;			while (i--) 			{				if (typeof domObj[a[i].name] === 'function') // no cache for name. Few functions expected				{					domObj[a[i].name] = null;				}			}		}		if ((domObj = domObj.childNodes)) 		{			var p = leaf.purge;			a = domObj.length;			while (a--) 			{				p(domObj[a]);			}		}		if (domObj.parentNode) 		{			domObj.parentNode.removeChild(domObj);		}	}};leaf.getByIds = function(ids){	var o;	if (ids instanceof Array) 	{		var D = document;		var L = ids.length;		var n = 0;		var i = 0;		var K = [];		while (i < L) 		{			if ((o = D.getElementById(ids[i++]))) 			{				K[n++] = o;			}		}		return K;	}	return (o = document.getElementById(ids)) ? [o] : [];};leaf.getByTags = function(tagNames, rootNode){	rootNode = rootNode ? rootNode.getElementsByTagName ? rootNode : document.getElementById(e) || document : document;	var o;	if (tagNames instanceof Array) 	{		var L = tagNames.length;		var n = 0;		var i = 0;		var j = 0;		var K = [];		var l;		while (i < L) 		{			l = (o = rootNode.getElementsByTagName(tagNames[i++])).length;			while (j < l) 			{				K[n++] = o[j++];			}			j = 0;		}		return K;	}	return rootNode.getElementsByTagName(tagNames);};if (document.getElementsByClassName) {	leaf.getByClasses = function(classNames, rootElement)	{		rootElement = rootElement ? rootElement.getElementsByClassName ? rootElement : document.getElementById(rootElement) || document : document;		var o;		if (classNames instanceof Array) 		{			var L = classNames.length;			var n = 0;			var i = 0;			var j = 0;			var K = [];			while (i < L) 			{				l = (o = rootElement.getElementsByClassName(classNames[i++])).length;				while (j < l) 				{					K[n++] = o[j++];				}				j = 0;			}			return K;		}		return rootElement.getElementsByClassName(classNames);	};}else {	leaf.getByClasses = function(classNames, rootElement)	{		var K = [];		if (typeof classNames === 'string' ? classNames = [classNames] : classNames instanceof Array && classNames.length) 		{			var R = new RegExp('(?:\\s|^)(?:' + classNames.join('\|') + ')(?:\\s|$)');			var n = 0;			var q = function(o)			{				if (o.style && R.test(o.className)) 				{					K[n++] = o;				}				if ((o = o.childNodes)) 				{					var L = o.length;					var i = 0;					while (i < L) 					{						q(o[i++]);					}				}			};			q(rootElement ? rootElement.getElementsByTagName ? rootElement : document.getElementById(rootElement) || document : document); // by tagName cause of no by class		}		return K;	};}if (window.addEventListener) {	leaf.addListener = function(domObj, type, listener)	{		if (domObj && domObj.addEventListener && typeof type === 'string' && typeof listener === 'function') 		{			domObj.addEventListener(type, listener, false);		}	};	leaf.removeListener = function(domObj, type, listener)	{		if (domObj && domObj.removeEventListener && typeof type === 'string' && typeof listener === 'function') 		{			domObj.removeEventListener(type, listener, false);		}	};	leaf.dispatchEvent = function(domObj, type)	{		if (domObj && domObj.dispatchEvent && typeof type === 'string') 		{			var e = document.createEvent('HTMLEvents');			e.initEvent(type, true, true);			domObj.dispatchEvent(e);		}	};}else 	if (window.attachEvent) 	{		leaf.addListener = function(domObj, type, listener)		{			if (domObj && domObj.attachEvent && typeof type === 'string' && typeof listener === 'function') 			{				var h = type + listener;				domObj['on' + h] = listener;				domObj.attachEvent('on' + type, (domObj[h] = function()				{					domObj['on' + h](event);				}));			}		};		leaf.removeListener = function(domObj, type, listener)		{			if (domObj && domObj.detachEvent && typeof type === 'string' && typeof listener === 'function') 			{				domObj.detachEvent('on' + type, domObj[(type += listener)]);				domObj[type] = null;				domObj['on' + type] = null;			}		};		leaf.dispatchEvent = function(domObj, type)		{			if (domObj && domObj.fireEvent && typeof type === 'string') 			{				domObj.fireEvent('on' + type, document.createEventObject());			}		};	}	else 	{		leaf.addListener = function(domObj, type, listener)		{		};		leaf.removeListener = function(domObj, type, listener)		{		};		leaf.dispatchEvent = function(domObj, type)		{		};	}leaf.ElementHandler = function(element){	if (this instanceof leaf.ElementHandler) 	{		var _ = this; // avoids common intellisense errors		_.setElement(element);	}};leaf.ElementHandler.prototype = {	/* do not handle this vars directly */	element: null,	style: null,		setElement: function(element)	{		this.style = (this.element = element ? element.style ? element : document.getElementById(element) : null) ? this.element.style : null;		return this;	},	getElement: function()	{		return this.element;	},	getStyle: function()	{		return this.style;	},	addListener: function(type, listener)	{		leaf.addListener(this.element, type, listener);		return this;	},	removeListener: function(type, listener)	{		leaf.removeListener(this.element, type, listener);		return this;	},	dispatchEvent: function(type)	{		leaf.dispatchEvent(this.element, type);		return this;	},	addClasses: function(classNames)	{		var E = this.element;		if (E && typeof E.className === 'string' && (typeof classNames === 'string' ? classNames = [classNames] : classNames instanceof Array)) 		{			var R = new RegExp('(?:\\s|^)' + E.className.trim().replace(/\s+/g, '\|') + '(?:\\s|$)', '');			var L = classNames.length;			var n = 0;			var i = 0;			var K = [];			while (i < L) 			{				if (R.test(classNames[i])) 				{					++i;				}				else 				{					K[n++] = classNames[i++];				}			}			E.className += ' ' + K.join(' ');		}		return this;	},	removeClasses: function(classNames)	{		var E = this.element;		if (E && (typeof classNames === 'string' ? classNames = [classNames] : classNames instanceof Array)) 		{			var c = E.className;			if (c) 			{				var R = new RegExp('(:?\\s|^)(?:' + classNames.join('\|') + ')(?:\\s|$)', '');				var L = (c = c.split(/\s+/)).length;				var n = 0;				var i = 0;				var K = [];				while (i < L) 				{					if (R.test(c[i])) 					{						++i;					}					else 					{						K[n++] = c[i++];					}				}				E.className = K.join(' ');			}		}		return this;	},	setBackground: function(color, src, x, y, repeat)	{		var S = this.style;		if (S) 		{			if (typeof color === 'string') 			{				S.backgroundColor = color;			}			if (typeof src === 'string') 			{				S.backgroundImage = 'url(\'' + src + '\')';			}			src = S.backgroundPosition.split(' ');			S.backgroundPosition = (typeof x === 'number' ? x + 'px' : typeof x === 'string' ? x : (src[0] || '50%')) + ' ' + (typeof y === 'number' ? y + 'px' : typeof y === 'string' ? y : (src[1] || '50%'));			S.backgroundRepeat = repeat ? repeat : 'no-repeat';		}		return this;	},	getBackground: function(keepValues)	{		var S = this.style;		if (S) 		{			var P = S.backgroundPosition.split(' ');			if (keepValues) 			{				return {					x: P[0] || '',					y: P[1] || '',					color: S.backgroundColor,					src: S.backgroundImage,					repeat: S.backgroundRepeat				};			}						return {				x: parseFloat(P[0]) || 0,				y: parseFloat(P[1]) || 0,				color: S.backgroundColor,				src: S.backgroundImage,				repeat: S.backgroundRepeat			};					}		return null;	},	setScroll: function(top, left)	{		var E = this.element;		if (E) 		{			if (typeof top === 'number') 			{				E.scrollTop = top < 0 ? 0 : E.scrollHeight < top ? E.scrollHeight : top;			}			if (typeof left === 'number') 			{				E.scrollLeft = left < 0 ? 0 : E.scrollWidth < left ? E.scrollWidth : left;			}		}		return this;	},	getScroll: function()	{		var E = this.element;		if (E) 		{			return {				top: E.scrollTop,				left: E.scrollLeft,				height: E.scrollHeight,				width: E.scrollWidth			};		}		return null;	},	create: function(tagName, id, classNames, cssObj, content)	{		if (typeof tagName === 'string' && (tagName = document.createElement(tagName))) 		{			if (typeof id === 'string') 			{				tagName.id = id;			}			this.style = (this.element = tagName).style;			this.addClass(classNames);			this.setCSS(cssObj);			this.setContent(content);		}		return this;	},	createChildElement: function(tagName, id, cssObj, content)	{		if (this.element && typeof tagName === 'string' && (tagName = document.createElement(tagName))) 		{			if (typeof id === 'string') 			{				tagName.id = id;			}			tagName = new leaf.ElementHandler(tagName);			tagName.setCSS(cssObj);			tagName.append(this.element);			tagName.setContent(content);		}		return this;	},	append: function(parent)	{		if (this.element && typeof parent === 'string' ? parent = document.getElementById(parent) : parent && (parent.nodeType === 1 || parent.nodeType === 11) || (parent = document.body)) 		{			this.remove();			parent.appendChild(this.element);		}		return this;	},	insertBefore: function(node)	{		if (this.element && (node.nodeType && node.parentNode || (node = document.getElementById(node)))) 		{			this.remove();			node.parentNode.insertBefore(this.element, node);		}		return this;	},	insertAfter: function(node)	{		var E = this.element;		if (E && (node.nodeType && node.parentNode || (node = document.getElementById(node)))) 		{			this.remove();			if (node.nextSibling) 			{				node.parentNode.insertBefore(E, node.nextSibling);			}			else 			{				node.parentNode.appendChild(E);			}		}		return this;	},	insertAsFirst: function(parent)	{		var E = this.element;		if (E && typeof parent === 'string' ? parent = document.getElementById(parent) : parent && (parent.nodeType === 1 || parent.nodeType === 11) || (parent = document.body)) 		{			if (parent.firstChild) 			{				parent.insertBefore(E, parent.firstChild);			}			else 			{				parent.appendChild(E);			}		}		return this;	},	remove: function()	{		var E = this.element;		if (E && E.parentNode) 		{			E.parentNode.removeChild(E);		}		return this;	},	getParent: function()	{		return this.element && this.element.parentNode || null;	},	getFirst: function()	{		var e = this.element;		if (e) 		{			e = e.firstChild;			while (e) 			{				if (e.nodeType === 1) 				{					return e;				}				e = e.nextSibling;			}		}		return null;	},	getNext: function()	{		var e = this.element;		if (e) 		{			while ((e = e.nextSibling)) 			{				if (e.nodeType === 1) 				{					return e;				}			}		}		return null;	},	getPrevious: function()	{		var e = this.element;		if (e) 		{			while ((e = e.previousSibling)) 			{				if (e.nodeType === 1) 				{					return e;				}			}		}		return null;	},	getLast: function()	{		var e = this.element;		if (e) 		{			e = e.lastChild;			while (e) 			{				if (e.nodeType === 1) 				{					return e;				}				e = e.previousSibling;			}		}		return null;	},	getChild: function(index)	{		return this.element && this.element.childNodes[index] || null;	},	hasChild: function(node)	{		return this.element && node && node.parentNode === this.element || false;	},	getChildElements: function()	{		var e = this.element;		var K = [];		if (e) 		{			var n = 0;			e = e.firstChild;			while (e) 			{				if (e.nodeType === 1) 				{					K[n++] = e;				}				e = e.nextSibling;			}		}		return K;	},	getChildElement: function(elementIndex)	{		var e = this.element;		if (e && typeof elementIndex === 'number') 		{			var n = 0;			e = e.firstChild;			while (e) 			{				if (e.nodeType === 1 && n++ === elementIndex) 				{					return e;				}				e = e.nextSibling;			}			return null;		}	},	setChildElement: function(elementIndex)	{		this.setElement(this.getChildElement(elementIndex));		return this;	},	setParent: function()	{		this.setElement(this.getParent());		return this;	},	setFirst: function()	{		this.setElement(this.getFirst());		return this;	},	setPrevious: function()	{		this.setElement(this.getPrevious());		return this;	},	setNext: function()	{		this.setElement(this.getNext());		return this;	},	setLast: function()	{		this.setElement(this.getLast());		return this;	},	appendChild: function(childNode)	{		if (this.element && childNode && childNode.nodeType) 		{			if (childNode.parentNode) 			{				childNode.parentNode.removeChild(childNode);			}			this.element.appendChild(childNode);		}		return this;	},	appendChildren: function(childNodes)	{		var E = this.element;		if (E && childNodes) 		{			var l = childNodes.length;			var i = 0;			var k;			while (i < l) 			{				if ((k = childNodes[i++]) && k.nodeType) 				{					if (k.parentNode) 					{						k.parentNode.removeChild(k);					}					E.appendChild(k);				}			}		}		return this;	},	removeChild: function(index)	{		if (this.element && (index = this.getChild(index))) 		{			this.element.removeChild(index);		}		return this;	},	removeChildElement: function(elementIndex)	{		if (this.element && (elementIndex = this.getChildElement(elementIndex))) 		{			this.element.removeChild(elementIndex);		}		return this;	},	removeChildren: function()	{		var E = this.element;		if (E) 		{			var K = E.childNodes;			var i = K.length;			while (i--) 			{				E.removeChild(K[i]);			}		}		return this;	},	purge: function()	{		leaf.purge(this.element);		this.element = this.style = null;		return this;	},	purgeChildElement: function(elementIndex)	{		leaf.purge(this.getChildElement(elementIndex));		return this;	},	purgeChildren: function()	{		var E = this.element;		if (E) 		{			var p = leaf.purge;			var C = E.childNodes;			var i = C.length;			var k;			while (i--) 			{				if ((k = C[i]).nodeType === 1) 				{					p(k);				}			}		}		return this;	},	cloneChild: function(index, cloneAttrAndChilds)	{		return (index = this.getChild(index)) ? index.cloneNode(!!cloneAttrAndChilds) : null;	},	cloneChildElement: function(elementIndex, cloneAttrAndChilds)	{		return (elementIndex = this.getChildElement(elementIndex)) ? elementIndex.cloneNode(!!cloneAttrAndChilds) : null;	},	hasCollision: function(collisorElement)	{		var E = this.element;		if (E && collisorElement && collisorElement.style) 		{			var R = document.documentElement;			var eX = 0;			var eY = 0;			var o = E;			while (o !== R) 			{				eX += o.offsetLeft;				eY += o.offsetTop;				o = o.parentNode;			}			var cX = 0;			var cY = 0;			o = collisorElement;			while (o !== R) 			{				cX += o.offsetLeft;				cY += o.offsetTop;				o = o.parentNode;			}			if (!(eX < cX - E.offsetWidth || cX + collisorElement.offsetWidth < eX)) 			{				return !(eY < cY - E.offsetHeight || cY + collisorElement.offsetHeight < eY);			}		}		return false;	},	setAttribute: function(attribute, value)	{		var E = this.element;		if (E && value !== undefined) 		{			if (typeof attribute === 'string') 			{				if ('style' === attribute && E.style.cssText !== undefined) 				{					E.style.cssText = value;				}				else 				{					E.setAttribute(attribute, value);				}			}			else 				if (typeof attribute === 'number') 				{					if (typeof E.attributes[attribute] === 'object') 					{						E.attributes[attribute].nodeValue = value;					}					else 					{						E.attributes[attribute] = value;					}				}					}		return this;	},	getAttribute: function(attribute)	{		var o = this.element;		if (o && (o = o[attribute] || o.getAttribute(attribute) || o.attributes[attribute])) 		{			if ('style' === attribute && o.cssText !== undefined) 			{				return o.cssText.toLowerCase();			}			if (typeof o === 'object') 			{				return o.nodeValue || '';			}		}		if (typeof o === 'string') 		{			return o;		}		return null;	}};(function(){	var S = document.createElement('div').style;	if (S.opacity === undefined) 	{		leaf.ElementHandler.prototype.setOpacity = function(opacity)		{			if (this.style && typeof opacity === 'number') 			{				this.style.filter = 'alpha(opacity=' + (opacity < 0 ? 0 : 1 < opacity ? 1 : opacity * 100 >> 0) + ')';			}			return this;		};		leaf.ElementHandler.prototype.getOpacity = function()		{			if (this.element) 			{				var o;				try 				{					o = this.element.filters.alpha.opacity / 100;					return o;				} 				catch (o) 				{					return (o = (/opacity=(\d+)/i).exec(this.style.cssText)) ? o[1] / 100 : 1;				}			}			return null;		};	}	else 	{		leaf.ElementHandler.prototype.setOpacity = function(opacity)		{			if (this.style && typeof opacity === 'number') 			{				this.style.opacity = opacity < 0 ? 0 : 1 < opacity ? 1 : opacity.toFixed(2);			}			return this;		};		leaf.ElementHandler.prototype.getOpacity = function()		{			var o = this.style;			if (o) 			{				return (o = parseFloat(o.opacity)) === o ? o : 1; // comparison is false if is NaN 			}			return null;		};	}	if (S.cssText === undefined) 	{		leaf.ElementHandler.prototype.setCSS = function(cssObj)		{			var E = this.element;			if (E && cssObj) 			{				var K = [];				var n = 0;				var c;				for (c in cssObj) 				{					K[n++] = c + ': ' + cssObj[c] + '\; ';				}				E.setAttribute('style', (E.getAttribute('style') || '') + K.join(''));			}			return this;		};		leaf.ElementHandler.prototype.getCSS = function(property)		{			var o = this.element;			if (o && typeof property === 'string' && (o = o.getAttribute('style')) && ~ (i = o.search(new RegExp('(?:\\\;|\\s|\\u00A0|^)' + property + '\\\:', 'i')))) 			{				return o.substring((i = o.indexOf(':', i) + 2), (i = o.indexOf('\;', i)) === -1 ? o.length : i);			}			return null;		};	}	else 	{		leaf.ElementHandler.prototype.setCSS = function(cssObj)		{			var S = this.style;			if (S && cssObj) 			{				var K = [];				var n = 0;				var c;				for (c in cssObj) 				{					K[n++] = c + ': ' + cssObj[c] + '\; ';				}				S.cssText = ((c = S.cssText) && (c.charAt(c.length - 1) === '\;' ? c : c + '; ') || '') + K.join('');			}			return this;		};		leaf.ElementHandler.prototype.getCSS = function(property)		{			var o = this.style;			if (o && (o = o.cssText) && typeof property === 'string' && ~ (i = o.search(new RegExp('(?:\\\;|\\s|^)' + property + '\\\:', 'i')))) 			{				return o.substring((i = o.indexOf(':', i) + 2), (i = o.indexOf('\;', i)) === -1 ? o.length : i);			}			return null;		};	}})();